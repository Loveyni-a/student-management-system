#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STUDENTS 100

// Structure to hold student information
typedef struct {
    int id;
    char name[50];
    float gpa;
} Student;

// Function prototypes
void addStudent(Student students[], int *count);
void displayStudents(const Student students[], int count);
void searchStudent(const Student students[], int count);
void deleteStudent(Student students[], int *count);

int main() {
    Student students[MAX_STUDENTS];
    int count = 0;
    int choice;

    do {
        printf("\nStudent Management System\n");
        printf("1. Add Student\n");
        printf("2. Display Students\n");
        printf("3. Search Student\n");
        printf("4. Delete Student\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                addStudent(students, &count);
                break;
            case 2:
                displayStudents(students, count);
                break;
            case 3:
                searchStudent(students, count);
                break;
            case 4:
                deleteStudent(students, &count);
                break;
            case 5:
                printf("Exiting...\n");
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    } while (choice != 5);

    return 0;
}

void addStudent(Student students[], int *count) {
    if (*count >= MAX_STUDENTS) {
        printf("Error!!Cannot add more students. Maximum limit reached.\n");
        return;
    }
    Student newStudent;
    printf("Enter student ID: ");
    scanf("%d", &newStudent.id);
    printf("Enter student name: ");
    scanf(" %[^\n]", newStudent.name); // Read string with spaces
    printf("Enter student GPA: ");
    scanf("%f", &newStudent.gpa);

    students[*count] = newStudent;
    (*count)++;
    printf("Student added successfully!\n");
}

void displayStudents(const Student students[], int count) {
    if (count == 0) {
        printf("No students to display.\n");
        return;
    }
    printf("\nList of Students:\n");
    printf("ID\tName\t\tGPA\n");
    printf("-----------------------------\n");
    for (int i = 0; i < count; i++) {
        printf("%d\t%s\t%.2f\n", students[i].id, students[i].name, students[i].gpa);
    }
}

void searchStudent(const Student students[], int count) {
    if (count == 0) {
        printf("No students to search.\n");
        return;
    }
    int id;
    printf("Enter student ID to search: ");
    scanf("%d", &id);
    for (int i = 0; i < count; i++) {
        if (students[i].id == id) {
            printf("Student found: ID: %d, Name: %s, GPA: %.2f\n", students[i].id, students[i].name, students[i].gpa);
            return;
        }
    }
    printf("Student with ID %d not found.\n", id);
}

void deleteStudent(Student students[], int *count) {
    if (*count == 0) {
        printf("No students to delete.\n");
        return;
    }
    int id;
    printf("Enter student ID to delete: ");
    scanf("%d", &id);
    for (int i = 0; i < *count; i++) {
        if (students[i].id == id) {
            // Shift students down to fill the gap
            for (int j = i; j < *count - 1; j++) {
                students[j] = students[j + 1];
            }
            (*count)--;
            printf("Student with ID %d deleted successfully.\n", id);
            return;
        }
    }
    printf("Student with ID %d not found.\n", id);
}
